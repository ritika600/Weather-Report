{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["countries","registerLocale","require","App","useState","apiData","setApiData","getState","setGetState","state","setState","apiUrl","process","useEffect","fetch","then","res","json","data","kelvinToFarenheit","k","toFixed","className","class","for","type","id","onChange","event","target","value","onClick","style","width","main","src","weather","icon","alt","temp","name","temp_min","temp_max","getName","sys","country","select","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAKAA,IAAUC,eAAeC,EAAQ,KAmHlBC,MAjHf,WAEE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,WAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,WAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAIMC,EAAM,4DAAwDF,EAAxD,kBADGG,oCAIfC,qBAAU,WACRC,MAAMH,GACHI,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUZ,EAAWY,QAC5B,CAACP,IAEJ,IAQMQ,EAAoB,SAACC,GACzB,OAAQA,EAAI,QAAQC,QAAQ,IAG9B,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,UAAlB,SACE,qDAEF,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,OAAf,UACE,qBAAKC,MAAM,WAAX,SACE,uBAAOC,IAAI,gBAAgBD,MAAM,iBAAjC,gCAIF,qBAAKA,MAAM,WAAX,SACE,uBACEE,KAAK,OACLC,GAAG,gBACHH,MAAM,eACNI,SA7BS,SAACC,GACpBpB,EAAYoB,EAAMC,OAAOC,QA6BfA,MAAOvB,MAGX,wBAAQe,UAAU,uBAAuBS,QA7B3B,WACpBrB,EAASH,IA4BH,uBAKF,qBAAKe,UAAU,oBAAoBU,MAAO,CAAEC,MAAO,QAAnD,SACG5B,EAAQ6B,KACP,sBAAKX,MAAM,wBAAX,UACE,qBACEY,IAAG,0CAAqC9B,EAAQ+B,QAAQ,GAAGC,KAAxD,QACHC,IAAI,sBACJhB,UAAU,iBAGZ,oBAAGA,UAAU,KAAb,UACGH,EAAkBd,EAAQ6B,KAAKK,MADlC,YAIA,oBAAGjB,UAAU,KAAb,UACE,mBAAGA,UAAU,0BAA6B,IAC1C,iCAASjB,EAAQmC,UAGnB,sBAAKlB,UAAU,WAAf,UACE,sBAAKA,UAAU,WAAf,UACE,8BACE,mBAAGC,MAAM,4BAA+B,IACxC,mCACGJ,EAAkBd,EAAQ6B,KAAKO,UADlC,eAIF,8BACE,mBAAGnB,UAAU,4BAA+B,IAC5C,mCACGH,EAAkBd,EAAQ6B,KAAKQ,UADlC,kBAKJ,sBAAKpB,UAAU,WAAf,UACE,8BACG,IACD,iCAASjB,EAAQ+B,QAAQ,GAAGF,UAE9B,4BACE,mCACG,IACAlC,IAAU2C,QAAQtC,EAAQuC,IAAIC,QAAS,KAAM,CAC5CC,OAAQ,2BAQpB,kDCpGGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.515334de.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport countries from 'i18n-iso-countries';\n\ncountries.registerLocale(require('i18n-iso-countries/langs/en.json'));\n\nfunction App() {\n  // State\n  const [apiData, setApiData] = useState({});\n  const [getState, setGetState] = useState('haryana');\n  const [state, setState] = useState('haryana');\n\n  // API KEY AND URL\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${state}&appid=${apiKey}`;\n\n  // Side effect\n  useEffect(() => {\n    fetch(apiUrl)\n      .then((res) => res.json())\n      .then((data) => setApiData(data));\n  }, [apiUrl]);\n\n  const inputHandler = (event) => {\n    setGetState(event.target.value);\n  };\n\n  const submitHandler = () => {\n    setState(getState);\n  };\n\n  const kelvinToFarenheit = (k) => {\n    return (k - 273.15).toFixed(2);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"heading\">\n        <h2>React Weather App</h2>\n      </header>\n      <div className=\"container\">\n        <div className=\"cont\">\n          <div class=\"col-auto\">\n            <label for=\"location-name\" class=\"col-form-label\">\n              Enter Location :\n            </label>\n          </div>\n          <div class=\"col-auto\">\n            <input\n              type=\"text\"\n              id=\"location-name\"\n              class=\"form-control\"\n              onChange={inputHandler}\n              value={getState}\n            />\n          </div>\n          <button className=\"btn btn-primary mt-2\" onClick={submitHandler}>\n            Search\n          </button>\n        </div>\n\n        <div className=\"card mt-3 mx-auto\" style={{ width: '60vw' }}>\n          {apiData.main ? (\n            <div class=\"card-body text-center\">\n              <img\n                src={`http://openweathermap.org/img/w/${apiData.weather[0].icon}.png`}\n                alt=\"weather status icon\"\n                className=\"weather-icon\"\n              />\n\n              <p className=\"h2\">\n                {kelvinToFarenheit(apiData.main.temp)}&deg; C\n              </p>\n\n              <p className=\"h5\">\n                <i className=\"fas fa-map-marker-alt\"></i>{' '}\n                <strong>{apiData.name}</strong>\n              </p>\n\n              <div className=\"row mt-4\">\n                <div className=\"col-md-6\">\n                  <p>\n                    <i class=\"fas fa-temperature-low \"></i>{' '}\n                    <strong>\n                      {kelvinToFarenheit(apiData.main.temp_min)}&deg; C\n                    </strong>\n                  </p>\n                  <p>\n                    <i className=\"fas fa-temperature-high\"></i>{' '}\n                    <strong>\n                      {kelvinToFarenheit(apiData.main.temp_max)}&deg; C\n                    </strong>\n                  </p>\n                </div>\n                <div className=\"col-md-6\">\n                  <p>\n                    {' '}\n                    <strong>{apiData.weather[0].main}</strong>\n                  </p>\n                  <p>\n                    <strong>\n                      {' '}\n                      {countries.getName(apiData.sys.country, 'en', {\n                        select: 'official',\n                      })}\n                    </strong>\n                  </p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <h1>Loading</h1>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}